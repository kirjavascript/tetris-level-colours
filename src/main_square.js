import React, { useState } from 'react';
import { render } from 'react-dom';

const orientationTable = [0x00,0x7B,0xFF,0x00,0x7B,0x00,0x00,0x7B,0x01,0xFF,0x7B,0x00,0xFF,0x7B,0x00,0x00,0x7B,0x00,0x00,0x7B,0x01,0x01,0x7B,0x00,0x00,0x7B,0xFF,0x00,0x7B,0x00,0x00,0x7B,0x01,0x01,0x7B,0x00,0xFF,0x7B,0x00,0x00,0x7B,0xFF,0x00,0x7B,0x00,0x01,0x7B,0x00,0xFF,0x7D,0x00,0x00,0x7D,0x00,0x01,0x7D,0xFF,0x01,0x7D,0x00,0xFF,0x7D,0xFF,0x00,0x7D,0xFF,0x00,0x7D,0x00,0x00,0x7D,0x01,0xFF,0x7D,0x00,0xFF,0x7D,0x01,0x00,0x7D,0x00,0x01,0x7D,0x00,0x00,0x7D,0xFF,0x00,0x7D,0x00,0x00,0x7D,0x01,0x01,0x7D,0x01,0x00,0x7C,0xFF,0x00,0x7C,0x00,0x01,0x7C,0x00,0x01,0x7C,0x01,0xFF,0x7C,0x01,0x00,0x7C,0x00,0x00,0x7C,0x01,0x01,0x7C,0x00,0x00,0x7B,0xFF,0x00,0x7B,0x00,0x01,0x7B,0xFF,0x01,0x7B,0x00,0x00,0x7D,0x00,0x00,0x7D,0x01,0x01,0x7D,0xFF,0x01,0x7D,0x00,0xFF,0x7D,0x00,0x00,0x7D,0x00,0x00,0x7D,0x01,0x01,0x7D,0x01,0xFF,0x7C,0x00,0x00,0x7C,0x00,0x01,0x7C,0x00,0x01,0x7C,0x01,0x00,0x7C,0xFF,0x00,0x7C,0x00,0x00,0x7C,0x01,0x01,0x7C,0xFF,0xFF,0x7C,0xFF,0xFF,0x7C,0x00,0x00,0x7C,0x00,0x01,0x7C,0x00,0xFF,0x7C,0x01,0x00,0x7C,0xFF,0x00,0x7C,0x00,0x00,0x7C,0x01,0xFE,0x7B,0x00,0xFF,0x7B,0x00,0x00,0x7B,0x00,0x01,0x7B,0x00,0x00,0x7B,0xFE,0x00,0x7B,0xFF,0x00,0x7B,0x00,0x00,0x7B,0x01,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00,0x00,0xFF,0x00];

function findOffset(rom) {
    return rom.findIndex((_, i, a) => {
        return a.slice(i, i + 7).every((d, i) => d === orientationTable[i]);
    });
}

function genie(address, value) {
    const code = [];
    code[0] = (value & 7) + ((value >> 4) & 8);
    code[1] = ((value >> 4) & 7) + ((address >> 4) & 8);
    code[2] = (address >> 4) & 7;
    code[3] = (address >> 12) + (address & 8);
    code[4] = (address & 7) + ((address >> 8) & 8);
    code[5] = (address >> 8) & 7;
    code[5] += value & 8;
    return code.map((d) => 'APZLGITYEOXUKSVN'[d]).join('');
}

function LevelColours() {
    const [offset, setOffset] = useState(0x8A9c);

    return (
        <main>
            <h1>Universal ROM split square codes</h1>

            <p className="offset">
                piece table offset: <strong>0x{offset.toString(16)}</strong>{' '}
                <label htmlFor="file" className="file">
                    use custom ROM
                </label>
                <input
                    id="file"
                    type="file"
                    onChange={(e) => {
                        const reader = new FileReader();
                        reader.readAsArrayBuffer(e.target.files[0]);
                        reader.onloadend = () => {
                            const rom = [...new Uint8Array(reader.result)];
                            const offset = findOffset(rom.slice(0x10));
                            if (offset !== -1) {
                                setOffset(offset + 0x8000);
                            } else {
                                alert(
                                    'ROM doesnt contain original orientation data',
                                );
                            }
                        };
                        e.preventDefault();
                    }}
                />
            </p>
            <pre>{genie(offset + 0x7D - 0x8000, 1)}</pre>
            <pre>{genie(offset + 0x83 - 0x8000, 1)}</pre>
        </main>
    );
}

render(
    <LevelColours />,
    document.body.appendChild(document.createElement('div')),
);
